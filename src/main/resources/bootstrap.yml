server:
  port: 8884

spring:
  profiles:
    active: @env@
  application:
    name: @project.artifactId@-@env@
  cloud:
    consul:
      config:
        format: yaml
        prefix: config/@project.artifactId@
        default-context: @env@
        profile-separator: ' '

feign:
  okhttp:
    enabled: true

# 开启健康检查
management:
  endpoints:
    web:
      exposure:
        include: '*'

# 宿主机相关配置
host:
  # docker0地址
  docker0: 172.17.0.1
  # 代理ip（解决docker容器内部无法访问宿主机ip的问题）
  proxy: 47.96.83.55

port:
  default: 10069
  dev: 10023
  dev-proxy: 10003
  test: 10024
  test-proxy: 10004
  prd: 10004

# 指定服务提供方实例地址（为空则不指定）
feign-url:
#feign-url: 192.168.28.58:8887

# 服务提供方实例名称
provider:
  system-center: system-center-@env@
  flow-center: flow-center-@env@
  fund-center: fund-center-@env@
  budget-service: budget-service-@env@
  relocation-manage: relocation-manage-@env@
  publicity-manage: publicity-manage-@env@

################### 本地环境配置 ###################
---
spring:
  profiles: default
  cloud:
    consul:
      host: consul.yeexun.com.cn
      discovery:
#        prefer-ip-address: true
        instance-id: ${spring.application.name}-${server.port}-${spring.cloud.client.ip-address}
        service-name: ${spring.application.name}
        # 本地调试使用frp代理ip
        health-check-url: http://${host.docker0}:${port.default}/actuator/health
        hostname: ${host.docker0}
        port: ${port.default}

################### 开发环境配置 ###################
---
spring:
  profiles: dev
  cloud:
    consul:
      host: consul.yeexun.com.cn
      discovery:
        instance-id: ${spring.application.name}-${port.dev}-${spring.cloud.client.ip-address}
        service-name: ${spring.application.name}
        health-check-url: http://${host.docker0}:${port.dev}/actuator/health
        # 开发环境使用代理ip
        hostname: ${host.proxy}
        port: ${port.dev-proxy}
################### 测试环境配置 ###################
---
spring:
  profiles: test
  cloud:
    consul:
      host: consul.yeexun.com.cn
      discovery:
        instance-id: ${spring.application.name}-${port.test}-${spring.cloud.client.ip-address}
        service-name: ${spring.application.name}
        health-check-url: http://${host.docker0}:${port.test}/actuator/health
        # 测试环境使用代理ip
        hostname: ${host.proxy}
        port: ${port.test-proxy}
################### 正式环境配置 ###################
---
spring:
  profiles: prd
  cloud:
    consul:
      host: ${host.docker0}
      discovery:
        instance-id: ${spring.application.name}-${port.prd}-${spring.cloud.client.ip-address}
        service-name: ${spring.application.name}
        health-check-url: http://${host.docker0}:${port.prd}/actuator/health
        hostname: ${host.docker0}
        port: ${port.prd}